package com.example.application.apis;

import com.example.application.database.models.User;
import com.example.application.database.repository.UserRepository;
import com.example.application.enums.UserPower;
import com.example.application.schemas.*;
import com.example.application.utils.Model2Schema;
import com.example.application.utils.Verify;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.util.List;

@RestController()
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    @Value("${application.session-duration}")
    private Integer sessionDuration;
    @GetMapping("/users")
    public List<UserOutSchema> getUsers(@RequestParam(required = false) String name,
                                        @RequestParam(required = false) String email,
                                        @RequestParam(required = false) UserPower power) {

        UserFilterSchema userFilterSchema = new UserFilterSchema(name, email, power);

        List<User> users = userRepository.findByNameContainingAndEmailContainingAndPowerIn(userFilterSchema.getName(),
                userFilterSchema.getEmail(),
                userFilterSchema.getPower());
        return users.stream().map(Model2Schema::user2UserOutSchema).toList();
    }
    @PutMapping("/users")
    public UserOutSchema createUser(@RequestBody UserCreateSchema form,
                                    HttpServletResponse response) {
        User user = new User();
        user.update(form.name(), form.email(), form.password(), form.power());
        UserOutSchema result = null;
        try {
            userRepository.save(user);
            result = new UserOutSchema(user.getId(), user.getName(), user.getEmail(), user.getPower());

        } catch (Exception e) {
            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
        }
        return result;
    }

    @GetMapping("/users/{userId}")
    public UserOutSchema getUser(@PathVariable String userId,
                                 HttpServletResponse response) {
        User user = userRepository.findById(userId).orElse(null);
        if (user == null) {
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            return null;
        }
        return Model2Schema.user2UserOutSchema(user);
    }

    @PatchMapping("/users/{userId}")
    public UserOutSchema updateUser(@PathVariable String userId,
                                    @RequestBody UserUpdateSchema form,
                                    HttpServletResponse response,
                                    HttpSession session) {
        User user = userRepository.findById(userId).orElse(null);
        UserOutSchema result = null;
        if (!Verify.userPowerVerify(session, userId)) {
            response.setStatus(HttpServletResponse.SC_FORBIDDEN);
            return null;
        }

        if (user == null) {
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
        } else {
            user.update(form.name(), form.email(), form.password(), form.power());
            try {
                userRepository.save(user);
                result = Model2Schema.user2UserOutSchema(user);
            } catch (Exception e) {
                response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
            }

        }
        return result;
    }

    @DeleteMapping("/users/{userId}")
    public UserOutSchema deleteUser(@PathVariable String userId,HttpServletResponse response,HttpSession session) {
        if(Verify.userPowerVerify(session,userId)) {
            response.setStatus(HttpServletResponse.SC_FORBIDDEN);
            return null;
        }else{
            User user=userRepository.findById(userId).orElse(null);
            if(user==null){
                response.setStatus(HttpServletResponse.SC_NOT_FOUND);
                return null;
            }else{
                userRepository.deleteById(userId);
                return Model2Schema.user2UserOutSchema(user);
            }
        }
    }

    @PostMapping("/users/session")
    public void login(@RequestBody UserLoginSchema form, HttpServletResponse response, HttpSession session) {
        User user = userRepository.findByName(form.name()).orElse(null);
        if (user == null) {
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            session.invalidate();
        } else {
            if (Verify.userPasswordVerify(form, user)) {
                session.setAttribute("id", user.getId());
                session.setAttribute("name", user.getName());
                session.setAttribute("email", user.getEmail());
                session.setAttribute("power", user.getPower());
                session.setMaxInactiveInterval(sessionDuration);
            } else {
                session.invalidate();
                response.setStatus(HttpServletResponse.SC_FORBIDDEN);
            }

        }
    }
    @DeleteMapping("/users/session")
    public void logout(HttpSession session) {
        session.invalidate();
    }
}
